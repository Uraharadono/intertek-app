const fs = require('fs');
const path = require('path');
const webpack = require('webpack');
const flexbugs = require('postcss-flexbugs-fixes');
const autoprefixer = require('autoprefixer');
const cssnano = require('cssnano');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');

const isDebug = process.env.NODE_ENV !== 'production';

const createApiBaseUrl = () => {
    const urls = {
        dev: '',
        production: ''
    };
    return !isDebug ? urls.production : urls.dev;
};

function configureCssLoader() {
    const styleLoader = isDebug
        ? ['style-loader']
        : [MiniCssExtractPlugin.loader];

    const otherLoaders = [
        {
            loader: 'css-loader',
            options: { url: true, importLoaders: 1 }
        },
        {
            loader: 'postcss-loader',
            options: {
                ident: 'postcss',
                plugins: () => (isDebug
                    ? [flexbugs, autoprefixer()]
                    : [flexbugs, autoprefixer(), cssnano({ preset: 'default' })]
                )
            }
        },
        {
            loader: 'sass-loader',
            options: { precision: 9 }
        }
    ];

    return styleLoader.concat(otherLoaders);
}

module.exports = (options) => () => ({
    target: 'web',
    entry: options.entry,

    output: Object.assign({
        path: path.resolve(process.cwd(), 'build'),
        publicPath: '/'
    }, options.output),

    module: {
        rules: [
            {
                test: /\.js$/,
                loader: 'babel-loader',
                exclude: /node_modules/
            },
            {
                test: /\.scss$/,
                exclude: /node_modules/,
                use: configureCssLoader()
            },
            {
                test: /\.(png|jpg|ico|ttf|eot|svg)(\?v=[0-9]\.[0-9]\.[0-9])?$/,
                exclude: /node_modules/,
                use: {
                    loader: 'file-loader',
                    options: { name: '[name].[ext]' }
                }
            }
        ]
    },

    plugins: options.plugins.concat([
        // Always expose NODE_ENV to webpack, in order to use `process.env.NODE_ENV`
        // inside your code for any environment checks; UglifyJS will automatically
        // drop any unreachable code.
        new webpack.DefinePlugin({
            'process.env': {
                NODE_ENV: JSON.stringify(process.env.NODE_ENV)
            },
            API_BASE_URL: JSON.stringify(createApiBaseUrl())
        }),

        new HtmlWebpackPlugin({
            inject: true, // Inject all files that are generated by webpack, e.g. bundle.js
            templateContent: templateContent()
        }),

        new webpack.NamedModulesPlugin()
    ]),

    resolve: {
        modules: ['app', 'node_modules'],
        extensions: [
            '.js',
            '.jsx',
            '.react.js'
        ],
        mainFields: [
            'browser',
            'jsnext:main',
            'main'
        ]
    },

    mode: options.mode,
    devtool: options.devtool,
    devServer: options.devServer || {},
    performance: options.performance || {}
});

function templateContent() {
    return fs
        .readFileSync(path.resolve(process.cwd(), 'app/index.html'))
        .toString();
}
